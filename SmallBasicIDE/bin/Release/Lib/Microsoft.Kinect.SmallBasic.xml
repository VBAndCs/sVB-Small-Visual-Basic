<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Kinect.SmallBasic</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Kinect.SmallBasic.Controls.DownloadProgressWindow">
            <summary>
            Interaction logic for DownloadProgressWindow.xaml
            </summary>
            <summary>
            DownloadProgressWindow
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Controls.DownloadProgressWindow.#ctor">
            <summary>
            Initializes a new instance of the DownloadProgressWindow class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Controls.DownloadProgressWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.Controls.DownloadProgressWindow.CancelDownload">
            <summary>
            Cancel download event handler
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Controls.DownloadProgressWindow.Progress">
            <summary>
            Gets or sets the download progress
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.Data.ViewModel">
            <summary>
            View Model
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Data.ViewModel.width">
            <summary>
            the sensor width in pixels
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Data.ViewModel.height">
            <summary>
            the sensor height in pixels
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Data.ViewModel.sensorWarningVisibility">
            <summary>
            sensor warning visibility
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Data.ViewModel.imageSource">
            <summary>
            the image source
            </summary>
        </member>
        <member name="E:KinectForSmallBasicExtension.Data.ViewModel.PropertyChanged">
            <summary>
            Property changed event handler
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.Data.ViewModel.SensorWarningVisibility">
            <summary>
            Gets or sets the sensor warning visibility
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.Data.ViewModel.ImageSource">
            <summary>
            Gets or sets the image source
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.Data.ViewModel.Width">
            <summary>
            Gets or sets the width of the sensor in pixels
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.Data.ViewModel.Height">
            <summary>
            Gets or sets the height of the sensor in pixels
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.KinectBodyList">
            <summary>
            This is the list of the bodies that are being tracked by the Kinect sensor.
            <para>
            You must have a Microsoft Kinect v2 sensor installed to use this object. You can get a sensor here: <![CDATA[http://aka.ms/k4wv2purchase]]> 
            </para>    
            <para>
            This is not a supported object when Graduating to Visual Basic or running from the web.  Use the Kinect for Windows SDK with Visual Basic.
            </para>
            </summary>
            <example>
            <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  TextWindow.WriteLine("Body " + i + " is tracked")
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectBodyList.bodyTracker">
            <summary>
            the body tracker
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.StartTracking">
            <summary>
            Start tracking human bodies with the Kinect sensor
            </summary>
            <example>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  TextWindow.WriteLine("Body " + i + " is tracked")
                EndIf
              EndFor
            EndSub
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.StopTracking(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Stop tracking bodies with the Kinect sensor
            </summary>
            <param name="closeSensor">"True" to close the sensor, "False" to keep the sensor open</param>
            <example>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  TextWindow.WriteLine("Body " + i + " is tracked")
                EndIf
              EndFor
            EndSub
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.IsTracked(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Determine whether a specific body is being tracked by the Kinect sensor.
            </summary>
            <param name="index">the index of the body (from 1 to <c>KinectBodyList.Count</c>)</param>
            <returns>"True" if the body is tracked, "False" otherwise</returns>
            <example>
            This example will only output when the Kinect sensor is tracking a body.
            <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  TextWindow.WriteLine("Body " + i + " is tracked")
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetTrackingId(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the tracking Id of a body being tracked by the Kinect sensor.  You should use the tracking Id to keep track of a specific body.
            </summary>
            <param name="index">the 1-based index of the body</param>
            <returns>the tracking Id of the body</returns>
            <example>
            <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  id = KinectBodyList.GetTrackingId(i)
                  TextWindow.WriteLine("Body " + i + " tracking id:" + id)
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetHandState(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the state of the hand
            </summary>
            <param name="index">the 1-based index of the Body</param>
            <param name="hand">"left" or "right"</param>
            <returns>"Closed", "Lasso", "NotTracked", "Open", "Unknown"</returns>
            <example>
            This example will output the state of the right hand of bodies being tracked
            <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            handState = ""
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  state = KinectBodyList.GetHandState(i, "right")
                  If state &lt;&gt; handState Then
                    handState = state
                    TextWindow.WriteLine("Body " + i + " right hand: " + handState)
                  EndIf
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetJointPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the position of the joint in 3D camera space
            </summary>
            <param name="index">the 1-based index of the body</param>
            <param name="jointType">AnkleLeft, AnkleRight, ElbowLeft, ElbowRight, FootLeft, FootRight, HandLeft, HandRight, HandTipLeft, HandTipRight, Head, HipLeft, HipRight, KneeLeft, KneeRight, Neck, ShoulderLeft, ShoulderRight, SpineBase, SpineMid, SpineShoulder, ThumbLeft, ThumbRight, WristLeft, WristRight</param>
            <returns>If the joint is tracked, then the position as an Array with "X", "Y", and "Z" values.
            If the joint is not tracked then an empty value will be returned.</returns>
            <example>
            This example will write the 3D position of the left hand to the text window.
                <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  pos = KinectBodyList.GetJointPosition(i, "HandLeft")
                  If pos &lt;&gt; "" Then
                    TextWindow.WriteLine("Left hand of body " + i + ":")
                    TextWindow.WriteLine(" X: " + pos["X"])
                    TextWindow.WriteLine(" Y: " + pos["Y"])
                    TextWindow.WriteLine(" Z: " + pos["Z"])
                  EndIf
                EndIf
              EndFor
            EndSub
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetJointScreenPosition(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the position of the joint in 2D screen space
            </summary>
            <param name="index">the 1-based index of the body</param>
            <param name="jointType">AnkleLeft, AnkleRight, ElbowLeft, ElbowRight, FootLeft, FootRight, HandLeft, HandRight, HandTipLeft, HandTipRight, Head, HipLeft, HipRight, KneeLeft, KneeRight, Neck, ShoulderLeft, ShoulderRight, SpineBase, SpineMid, SpineShoulder, ThumbLeft, ThumbRight, WristLeft, WristRight</param>
            <returns>the position as an Array with "X" and "Y" values.  If the joint is not being tracked, this will return an empty value "".</returns>
            <example>
            This example will write the 2D position of the left hand to the text window.
                <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  pos = KinectBodyList.GetJointScreenPosition(i, "HandLeft")
                  If pos &lt;&gt; "" Then
                    TextWindow.WriteLine("Left hand of body " + i + ":")
                    TextWindow.WriteLine(" X: " + pos["X"])
                    TextWindow.WriteLine(" Y: " + pos["Y"])
                  EndIf
                EndIf
              EndFor
            EndSub
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetJointOrientation(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the orientation of a joint
            </summary>
            <param name="index">the 1-based index of the body</param>
            <param name="jointType">AnkleLeft, AnkleRight, ElbowLeft, ElbowRight, FootLeft, FootRight, HandLeft, HandRight, HandTipLeft, HandTipRight, Head, HipLeft, HipRight, KneeLeft, KneeRight, Neck, ShoulderLeft, ShoulderRight, SpineBase, SpineMid, SpineShoulder, ThumbLeft, ThumbRight, WristLeft, WristRight</param>
            <returns>a Vector with X, Y, Z, and W components</returns>
            <example>The following example will output the X-axis direction of the right hand from the first body being tracked:
                <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  pos = KinectBodyList.GetJointOrientation(i, "HandLeft")
                  If pos &lt;&gt; "" Then
                    TextWindow.WriteLine("Left hand of body " + i + ":")
                    TextWindow.WriteLine(" X: " + pos["X"])
                    TextWindow.WriteLine(" Y: " + pos["Y"])
                    TextWindow.WriteLine(" Z: " + pos["Z"])
                    TextWindow.WriteLine(" W: " + pos["W"])
                  EndIf
                EndIf
              EndFor
            EndSub
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetLean(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the amount a body is leaning, which is a number between -1 (leaning left or back) and 1 (leaning right or front). 
            </summary>
            <param name="index">the index of the body (from 1 to <c>KinectBodyList.Count</c>)</param>
            <returns>the lean direction with X and Y components</returns>
            <example>The following example will output the X and Y Lean factor for each body that is tracked:
                <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                isTracked = KinectBodyList.IsTracked(i)
                trackingState = KinectBodyList.GetLeanTrackingState(i)
                If isTracked = "True" And trackingState = "Tracked" Then
                  pos = KinectBodyList.GetLean(i)
                  TextWindow.WriteLine("Lean of body " + i + ":")
                  TextWindow.WriteLine(" X: " + pos["X"])
                  TextWindow.WriteLine(" Y: " + pos["Y"])
                EndIf
              EndFor
            EndSub
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetLeanTrackingState(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the Lean tracking state of a body
            </summary>
            <param name="index">the index of the body (from 1 to <c>KinectBodyList.Count</c>)</param>
            <returns>"NotTracked", "Inferred", or "Tracked"</returns>
            <example>The following example will output the X and Y Lean factor for each body that is tracked:
                <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                isTracked = KinectBodyList.IsTracked(i)
                trackingState = KinectBodyList.GetLeanTrackingState(i)
                If isTracked = "True" And trackingState = "Tracked" Then
                  pos = KinectBodyList.GetLean(i)
                  TextWindow.WriteLine("Lean of body " + i + ":")
                  TextWindow.WriteLine(" X: " + pos["X"])
                  TextWindow.WriteLine(" Y: " + pos["Y"])
                EndIf
              EndFor
            EndSub
                </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.NotifyBodiesChanged">
            <summary>
            Notify that the bodies have changed
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.BodyTracker_BodiesChanged(System.Object,System.EventArgs)">
            <summary>
            Bodies changed event handler
            </summary>
            <param name="sender">the <see cref="P:Microsoft.Kinect.SmallBasic.KinectBodyList.BodyTracker"/></param>
            <param name="e">the event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetBodyProperty(Microsoft.SmallBasic.Library.Primitive,System.Func{Microsoft.Kinect.Body,Microsoft.SmallBasic.Library.Primitive})">
            <summary>
            Gets a body property
            </summary>
            <param name="index">the 1-based body index</param>
            <param name="getFunction">the getter function</param>
            <returns>the property value</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.GetJointProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,System.Func{Microsoft.Kinect.Joint,Microsoft.SmallBasic.Library.Primitive})">
            <summary>
            Gets a joint property
            </summary>
            <param name="index">the 1-based body index</param>
            <param name="jointType">the joint type</param>
            <param name="getFunction">the function to get the joint property</param>
            <returns>the joint property</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectBodyList.Get1BasedBody(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            get the 1-based body
            </summary>
            <param name="index">the 1-based body index</param>
            <returns>the body or null</returns>
            <exception cref="T:Microsoft.Kinect.SmallBasic.KinectException">if the index is not a number 
            between 1 and the number of bodies.</exception>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.KinectBodyList.BodiesChanged">
            <summary>
            Raise an event when the Kinect bodies change
            </summary>
            <example>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  TextWindow.WriteLine("Body " + i + " is tracked")
                EndIf
              EndFor
            EndSub
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectBodyList.Count">
            <summary>
            Gets the maximum number of bodies that can be tracked by the Kinect sensor.
            </summary>
            <example>
            <code>
            KinectBodyList.BodiesChanged = OnBodiesChanged
            KinectBodyList.StartTracking()
            TextWindow.Pause()
            KinectBodyList.StopTracking("True")
            <para/>
            Sub OnBodiesChanged
              For i = 1 To KinectBodyList.Count
                If KinectBodyList.IsTracked(i) = "True" Then
                  id = KinectBodyList.GetTrackingId(i)
                  TextWindow.WriteLine("Body " + i + " tracking id:" + id)
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectBodyList.BodyTracker">
            <summary>
            Gets the singleton body tracker
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.KinectException">
            <summary>
            Kinect Exception
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the KinectException class.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the KinectException class.
            </summary>
            <param name="message">the message</param>
            <param name="innerException">the inner exception</param>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.KinectFaceList">
            <summary>
            <para>
            Track the expression, orientation, and position of human faces with a Kinect sensor. When this object is used in a Small Basic program, a NuiDatabase directory is created in the same folder as the .exe file for the program.  This directory contains data essential for the face tracker and should not be changed or removed.
            </para>
            <para/>
            <para>
            You must have a Microsoft Kinect v2 sensor installed to use this object. You can get a sensor here: <![CDATA[http://aka.ms/k4wv2purchase]]>
            </para>    
            <para>
            This is not a supported object when Graduating to Visual Basic or running from the web.  Use the Kinect for Windows SDK with Visual Basic.
            </para>
            </summary>
            <example>
            <code>
            KinectFaceList.FacesChanged = OnFacesChanged
            <para/>
            KinectFaceList.StartTracking()
            <para/>
            TextWindows.Pause()
            <para/>
            KinectFaceList.StopTracking()
            <para/>
            Sub OnFacesChanged
                For i = 1 to KinectFaceList.Count
                    If KinectFaceList.IsTracked(i) = "True" Then
                        isHappy = KinectFaceList.GetFaceProperty(i, "Happy")
                        TextWindow.Write("Face " + i + ": ")
                        TextWindow.WriteLine("Happy=" + isHappy)    
                    EndIf
                EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectFaceList.faceTracker">
            <summary>
            the singleton face tracker
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectFaceList.bodyCount">
            <summary>
            the body count
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.StartTracking">
             <summary>
             Start tracking faces
             </summary>
             <returns>"True" if successful, "False" otherwise</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.StopTracking(Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Stop tracking
             </summary>
             <param name="closeSensor">True to close the Kinect sensor, False otherwise</param>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.IsTracked(Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Is the face being tracked?
             </summary>
             <param name="index">the 1-based index of the face</param>
             <returns>"True" if the primitive is being tracked, "False" otherwise.</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetBoundingBoxInColorSpace(Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Gets the face bounding box in color space
             </summary>
             <param name="index">the face index</param>
             <returns>an array with Left, Top, Right, and Bottom components</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
               TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   box = KinectFaceList.GetBoundingBoxInColorSpace(i)
                   TextWindow.Write("Face " + i + ": ")
                   TextWindow.Write(box["Left"] + ", ")
                   TextWindow.Write(box["Top"] + ", ")
                   TextWindow.Write(box["Right"] + ", ")
                   TextWindow.WriteLine(box["Bottom"])
                 EndIf
               EndFor
             EndSub
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetBoundingBoxInInfraredSpace(Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Gets the face bounding box in infrared space
             </summary>
             <param name="index">the face index</param>
             <returns>a bounding box with Left, Top, Right, and Bottom components</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
               TextWindow.WriteLine("Tracking face bounding boxes in infrared space")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   box = KinectFaceList.GetBoundingBoxInInfraredSpace(i)
                   TextWindow.Write("Face " + i + ": ")
                   TextWindow.Write(box["Left"] + ", ")
                   TextWindow.Write(box["Top"] + ", ")
                   TextWindow.Write(box["Right"] + ", ")
                   TextWindow.WriteLine(box["Bottom"])
                 EndIf
               EndFor
             EndSub
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetFeatures(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Get the features that are being tracked by the face tracker
            </summary>
            <param name="index">1-based the face index</param>
            <returns>an array of the features being tracked by the face tracker with the following indices: BoundingBoxInInfraredSpace, PointsInInfraredSpace, BoundingBoxInColorSpace, PointsInColorSpace, RotationOrientation, Happy, RightEyeClosed, LeftEyeClosed, MouthOpen, LookingAway, Glasses, FaceEngagement</returns>
            <example>
            <code>
            Main()
            
            Sub Main 
              TextWindow.WriteLine("Is Face Hapiness being tracked?")
              KinectFaceList.FacesChanged = OnFacesChanged
              KinectFaceList.StartTracking()
              TextWindow.Pause()
              KinectFaceList.StopTracking("True")
            EndSub
            
            Sub OnFacesChanged
              For i = 1 To KinectFaceList.Count
                if KinectFaceList.IsTracked(i) = "True" Then
                  features = KinectFaceList.GetFeatures(i)
                  TextWindow.Write("Face features " + i + ": ")
                  TextWindow.WriteLine("Happy: " + Array.ContainsIndex(features, "Happy"))
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetFacePointInColorSpace(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Gets a face point in color space
             </summary>
             <param name="index">the 1-based index of the face</param>
             <param name="pointType">"EyeLeft", "EyeRight", "Nose", "MouthCornerLeft", or "MouthCornerRight"</param>
             <returns>the point in color space with "X" and "Y" components</returns>
             <example><code>
             Main()
            
             Sub Main 
               TextWindow.WriteLine("Get the nose position in color space")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   point = KinectFaceList.GetFacePointInColorSpace(i, "Nose")
                   TextWindow.Write("Face " + i + " Nose: ")
                   TextWindow.Write(point["X"] + ", ")
                   TextWindow.WriteLine(point["Y"])
                 EndIf
               EndFor
             EndSub
             </code></example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetFaceProperty(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Gets a face property
             </summary>
             <param name="index">the 1-based face index</param>
             <param name="faceProperty">Happy, Engaged, WearingGlasses, LeftEyeClosed, RightEyeClosed, MouthOpen, MouthMoved, or LookingAway</param>
             <returns>"Unknown", "No", "Maybe", or "Yes"</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetRotationQuaternion(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the face rotation quaternion.
            </summary>
            <param name="index">the 1-based face index</param>
            <returns>the rotation quaternion with "W", "X", "Y", and "Z" array components.</returns>
            <example>
            <code>
            Main()
            
            Sub Main 
              TextWindow.WriteLine("Tracking Face Rotation")
              KinectFaceList.FacesChanged = OnFacesChanged
              KinectFaceList.StartTracking()
              TextWindow.Pause()
              KinectFaceList.StopTracking("True")
            EndSub
            
            Sub OnFacesChanged
              precision = 8
              For i = 1 To KinectFaceList.Count
                if KinectFaceList.IsTracked(i) = "True" Then
                  rotation = KinectFaceList.GetRotationQuaternion(i)
                  TextWindow.Write("Face " + i + " rotation: ")
                  TextWindow.Write(Text.GetSubText(rotation["W"], 1, precision) + ", ")
                  TextWindow.Write(Text.GetSubText(rotation["X"], 1, precision) + ", ")
                  TextWindow.Write(Text.GetSubText(rotation["Y"], 1, precision) + ", ")
                  TextWindow.WriteLine(Text.GetSubText(rotation["Z"], 1, precision))
                EndIf
              EndFor
            EndSub
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetTrackingId(Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Gets the tracking Id of a face
             </summary>
             <remarks>the tracking id should stay consistent while the person is in the Kinect sensor field of view.</remarks>
             <param name="index">the 1-based face index</param>
             <returns>the tracking Id of the face</returns>
             <example>
             <code>
             Main()
            
             Sub Main 
               TextWindow.WriteLine("Get the persistent tracking Id for a face.")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 If KinectFaceList.IsTracked(i) = "True" Then
                   trackingId = KinectFaceList.GetTrackingId(i)
                   TextWindow.WriteLine("Face " + i + " tracking id: " + trackingId)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.CreateFaceTracker">
            <summary>
            Create the face tracker
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.KinectFaceList_IsAvailableChanged(System.Object,Microsoft.Kinect.IsAvailableChangedEventArgs)">
            <summary>
            Kinect Sensor availability changed event handler
            </summary>
            <param name="sender">the <see cref="T:Microsoft.Kinect.KinectSensor"/></param>
            <param name="e">the is available changed event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.OnFacesChanged(System.Object,Microsoft.Kinect.SmallBasic.Services.FacesChangedEventArgs)">
            <summary>
            Trigger event that faces have changed
            </summary>
            <param name="sender">the <see cref="T:Microsoft.Kinect.SmallBasic.Services.FaceTracker"/></param>
            <param name="e">the faces changed event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.GetFaceProperty(Microsoft.SmallBasic.Library.Primitive,System.Func{Microsoft.Kinect.Face.FaceFrameResult,Microsoft.SmallBasic.Library.Primitive})">
            <summary>
            Gets a body property
            </summary>
            <param name="index">the 1-based body index</param>
            <param name="getFunction">the getter function</param>
            <returns>the property value</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectFaceList.Get1BasedFace(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            get the 1-based body
            </summary>
            <param name="index">the 1-based body index</param>
            <returns>the body or null</returns>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.KinectFaceList.FacesChanged">
             <summary>
             Raise an event when the Kinect sensor detects that faces change
             </summary>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.KinectFaceList.IsAvailableChanged">
            <summary>
            Raise an event when the Kinect sensor availability changes: check the KinectFaceList.IsAvailable property when this event is triggered.
            </summary>
            <example>
            <code>
            Main()
            
            Sub Main
              TextWindow.WriteLine("Kinect Face list tracking: detach and attach Kinect sensor")
              KinectFaceList.StartTracking()
              KinectFaceList.IsAvailableChanged = OnIsAvailableChanged
              TextWindow.Pause()
              KinectFaceList.StopTracking("True")
            EndSub
            
            Sub OnIsAvailableChanged
              TextWindow.WriteLine("Is Available: " + KinectFaceList.IsAvailable)
            EndSub
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectFaceList.Count">
             <summary>
             Gets the number of faces that the Kinect Sensor can track
             </summary>
             <example>
             <code>
             Main()
            
             Sub Main 
              TextWindow.WriteLine("Tracking Faces")
               KinectFaceList.FacesChanged = OnFacesChanged
               KinectFaceList.StartTracking()
               TextWindow.Pause()
               KinectFaceList.StopTracking("True")
             EndSub
            
             Sub OnFacesChanged
               For i = 1 To KinectFaceList.Count
                 if KinectFaceList.IsTracked(i) = "True" Then
                   mouthOpen = KinectFaceList.GetFaceProperty(i, "MouthOpen")
                   TextWindow.WriteLine("Face " + i + " mouth open " + mouthOpen)
                 EndIf
               EndFor
             EndSub        
             </code>
             </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectFaceList.IsAvailable">
            <summary>
            Gets a value indicating whether the Kinect Sensor is available: "True" if available, "False" otherwise.
            </summary>
            <example>
            <code>
            Main()
            
            Sub Main
              TextWindow.WriteLine("Kinect Face list tracking: detach and attach Kinect sensor")
              KinectFaceList.StartTracking()
              KinectFaceList.IsAvailableChanged = OnIsAvailableChanged
              TextWindow.Pause()
              KinectFaceList.StopTracking("True")
            EndSub
            
            Sub OnIsAvailableChanged
              TextWindow.WriteLine("Is Available: " + KinectFaceList.IsAvailable)
            EndSub
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.BodyIndexErrorMessage">
            <summary>
              Looks up a localized string similar to Body {0} does not exist.  Valid body is from 1 to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.CouldNotStartTrackingFaces">
             <summary>
               Looks up a localized string similar to Could not start tracking faces:
            
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.DownloadingKinectDatabase">
            <summary>
              Looks up a localized string similar to Downloading Kinect Database.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.DownloadMessage">
             <summary>
               Looks up a localized string similar to The Kinect face tracker requires an additional 36 MB component to be downloaded to your system.
            
            Press OK to download it and continue..
             </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.DownloadMessageConnect">
             <summary>
               Looks up a localized string similar to The Kinect face tracker requires an additional 36 MB component to be downloaded to your system.  Connect your system to a wired or wireless internet connection.
            
            Press OK to download it and continue..
             </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.InternetError">
            <summary>
              Looks up a localized string similar to Did not download face tracking component..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Resources.KinectFaceTracking">
            <summary>
              Looks up a localized string similar to Kinect Face Tracking.
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.Services.BodyIndexVisualizer">
            <summary>
            body index visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.bodyColors">
            <summary>
            body colors
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.bytePerPixel">
            <summary>
            Size for the RGB pixel in bitmap
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.reader">
            <summary>
            FrameReader for our body index output
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.data">
            <summary>
            Array of body index values
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.pixels">
            <summary>
            Array of body index pixels used for the output
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.bitmap">
            <summary>
            WriteableBitmap linked to our UI
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.#ctor(Microsoft.Kinect.KinectSensor,System.Windows.Controls.Image)">
            <summary>
            Initializes a new instance of the BodyIndexVisualizer class.
            </summary>
            <param name="sensor">the Kinect sensor</param>
            <param name="image">the image to render to</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.Dispose">
            <summary>
            Dispose of the resources
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.CaptureImage(System.Int32,System.Int32)">
            <summary>
            Capture the current image
            </summary>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename of the current image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.CaptureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture a cropped image
            </summary>
            <param name="left">the left of the cropped image</param>
            <param name="top">the top of the cropped image</param>
            <param name="width">the width of the cropped image</param>
            <param name="height">the height of the cropped image</param>
            <returns>the filename of the cropped image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.Dispose(System.Boolean)">
            <summary>
            Dispose of the reader and detach the event handler
            </summary>
            <param name="managed">release managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.BodyIndexVisualizer.OnFrameArrived(System.Object,Microsoft.Kinect.BodyIndexFrameArrivedEventArgs)">
            <summary>
            Body index frame arrived
            </summary>
            <param name="sender">the sender</param>
            <param name="e">the body index frame arrived event arguments</param>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.Services.BodyTracker">
            <summary>
            Body Tracker
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.BodyTracker.kinectSensor">
            <summary>
            the kinect sensor
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.BodyTracker.bodyFrameReader">
            <summary>
            the body frame reader
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.#ctor">
            <summary>
            Initializes a new instance of the BodyTracker class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.StartTracking">
            <summary>
            Start body tracking
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.StopTracking(System.Boolean)">
            <summary>
            Stop body tracking
            </summary>
            <param name="closeSensor">true to close the Kinect Sensor</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.Dispose">
            <summary>
            dispose of the resources
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="disposeManaged">dispose the managed resources</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.BodyTracker.OnFrameArrived(System.Object,Microsoft.Kinect.BodyFrameArrivedEventArgs)">
            <summary>
            Body frame arrived
            </summary>
            <param name="sender">the <see cref="T:Microsoft.Kinect.BodyFrameReader"/></param>
            <param name="e">the body frame arrived event arguments</param>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.Services.BodyTracker.BodiesChanged">
            <summary>
            the bodies changed event handler
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.BodyTracker.Count">
            <summary>
            Gets the number of bodies tracked by the Kinect Sensor
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.BodyTracker.Bodies">
            <summary>
            Gets the bodies being tracked by the Kinect sensor
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.BodyVisualizer">
            <summary>
            Body visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.bodyTracker">
            <summary>
            the body tracker
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.sensor">
            <summary>
            the Kinect sensor
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.connections">
            <summary>
            the connections between joints
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.isMappedToCameraSpace">
            <summary>
            Is the body mapped to camera or depth space
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.#ctor(Microsoft.Kinect.KinectSensor,System.Windows.Controls.Canvas,System.Boolean,Microsoft.Kinect.SmallBasic.Services.BodyTracker)">
            <summary>
            Initializes a new instance of the BodyVisualizer class.
            </summary>
            <param name="sensor">the Kinect sensor</param>
            <param name="canvas">the canvas to render to</param>
            <param name="isMappedToCameraSpace">is the body mapped to camera or depth space</param>
            <param name="bodyTracker">the body tracker</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.Dispose">
            <summary>
            Dispose of the resources
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="managed">dispose of managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.OnBodiesChanged(System.Object,System.EventArgs)">
            <summary>
            Bodies changed event handler
            </summary>
            <param name="sender">the <see cref="T:Microsoft.Kinect.SmallBasic.Services.BodyTracker"/></param>
            <param name="e">the event arguments</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.DrawConnections(Microsoft.Kinect.Body)">
            <summary>
            Draw the body
            </summary>
            <param name="body">the body</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.DrawBody(Microsoft.Kinect.Body)">
            <summary>
            Draw a body
            </summary>
            <param name="body">the body to draw</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.DrawJoint(Microsoft.Kinect.Joint,System.Double,System.Windows.Media.SolidColorBrush,System.Double,System.Windows.Media.SolidColorBrush)">
            <summary>
            Draw a joint
            </summary>
            <param name="joint">the joint</param>
            <param name="radius">the radius in pixels</param>
            <param name="fill">the fill color</param>
            <param name="borderWidth">the border width</param>
            <param name="border">the border brush</param>
        </member>
        <member name="P:KinectForSmallBasicExtension.BodyVisualizer.Canvas">
            <summary>
            Gets or sets the canvas
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.BodyVisualizer.Connection">
            <summary>
            Joint Connection
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.Connection.Joint1">
            <summary>
            the first joint
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.BodyVisualizer.Connection.Joint2">
            <summary>
            the second joint
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.BodyVisualizer.Connection.#ctor(Microsoft.Kinect.JointType,Microsoft.Kinect.JointType)">
            <summary>
            Initializes a new instance of the Connection structure.
            </summary>
            <param name="joint1">the first joint</param>
            <param name="joint2">the second joint</param>
        </member>
        <member name="T:KinectForSmallBasicExtension.CameraVisualizer">
            <summary>
            The camera visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.DPI">
            <summary>
            Bitmap Dots per inch
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.bytePerPixel">
            <summary>
            Size for the RGB pixel in bitmap
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.colorReader">
            <summary>
            FrameReader for the color output
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.colorPixels">
            <summary>
            Array of color pixels
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.colorBitmap">
            <summary>
            Color WriteableBitmap linked to our UI
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.coordinateMapper">
            <summary>
            the coordinate mapper
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.depthFrameData">
            <summary>
            the depth frame data
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.bodyIndexFrameData">
            <summary>
            the body index frame data
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.colorPoints">
            <summary>
            the color points
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.displayPixels">
            <summary>
            the display pixels
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.multiReader">
            <summary>
            the multi-source reader
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.CameraVisualizer.viewModel">
            <summary>
            the view model
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.#ctor(Microsoft.Kinect.KinectSensor,KinectForSmallBasicExtension.Data.ViewModel,System.Boolean)">
            <summary>
            Initializes a new instance of the CameraVisualizer class.
            </summary>
            <param name="sensor">the Kinect Sensor</param>
            <param name="viewModel">the view model</param>
            <param name="isBackgroundVisible">is the background visible?</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.Dispose">
            <summary>
            Dispose of the resources
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.CaptureImage(System.Int32,System.Int32)">
            <summary>
            Capture the current image
            </summary>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.CaptureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture a cropped image
            </summary>
            <param name="left">the left of the cropped image</param>
            <param name="top">the top of the cropped image</param>
            <param name="width">the width of the cropped image</param>
            <param name="height">the height of the cropped image</param>
            <returns>the filename of the cropped image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.Dispose(System.Boolean)">
            <summary>
            Dispose of the color reader
            </summary>
            <param name="managed">dispose of the managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.OnColorFrameArrived(System.Object,Microsoft.Kinect.ColorFrameArrivedEventArgs)">
            <summary>
            Color frame arrived
            </summary>
            <param name="sender">the color frame reader</param>
            <param name="e">the color frame arrived event arguments</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.RenderColorPixels">
            <summary>
            Render the color pixels
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.CameraVisualizer.OnMultiSourceFrameArrived(System.Object,Microsoft.Kinect.MultiSourceFrameArrivedEventArgs)">
            <summary>
            Handles the depth/color/body index frame data arriving from the sensor
            </summary>
            <param name="sender">object sending the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:KinectForSmallBasicExtension.DepthVisualizer">
            <summary>
            Depth visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.DepthVisualizer.bytePerPixel">
            <summary>
            Size for the RGB pixel in bitmap
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.DepthVisualizer.depthReader">
            <summary>
            FrameReader for our depth output
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.DepthVisualizer.depthData">
            <summary>
            Array of depth values
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.DepthVisualizer.depthPixels">
            <summary>
            Array of depth pixels used for the output
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.DepthVisualizer.depthBitmap">
            <summary>
            Depth WriteableBitmap linked to our UI
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.#ctor(Microsoft.Kinect.KinectSensor,System.Windows.Controls.Image)">
            <summary>
            Initializes a new instance of the DepthVisualizer class.
            </summary>
            <param name="sensor">the Kinect sensor</param>
            <param name="image">the image to render to</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.Dispose">
            <summary>
            Dispose of the depth reader
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.CaptureImage(System.Int32,System.Int32)">
            <summary>
            Capture the current image
            </summary>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.CaptureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture a cropped image
            </summary>
            <param name="left">the left of the cropped image</param>
            <param name="top">the top of the cropped image</param>
            <param name="width">the width of the cropped image</param>
            <param name="height">the height of the cropped image</param>
            <returns>the filename of the cropped image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="managed">dispose of managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.DepthVisualizer.OnDepthFrameArrived(System.Object,Microsoft.Kinect.DepthFrameArrivedEventArgs)">
            <summary>
            Frame arrived
            </summary>
            <param name="sender">the depth reader</param>
            <param name="e">the depth frame arrived event arguments</param>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.KinectWindow">
            <summary>
            Use the KinectWindow to show camera, infrared, depth, and body data from a Kinect sensor 
            <para>
            You must have a Microsoft Kinect v2 sensor installed to use this object. You can get a sensor here: <![CDATA[http://aka.ms/k4wv2purchase]]>
            </para>    
            <para>
            This is not a supported object when Graduating to Visual Basic or running from the web.  Use 
            the Kinect for Windows SDK with Visual Basic.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.isEndOnClose">
            <summary>
            Should the program end when the window is closed?
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.left">
            <summary>
            the window left
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.top">
            <summary>
            the window top
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.width">
            <summary>
            the window width
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.height">
            <summary>
            the window height
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.isBodySensor">
            <summary>
            Is the body sensor on?
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.window">
            <summary>
            the window
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.control">
            <summary>
            the Kinect window control
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.backgroundImage">
            <summary>
            the background image
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.isBackgroundVisible">
            <summary>
            Is the background visible
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.showResetEvent">
            <summary>
            Show reset event
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.KinectWindow.title">
            <summary>
            the Kinect Window title
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.CaptureImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Capture a picture, save it, and load it into the ImageList
            <para>
            The image will be saved to the My Pictures\Kinect Images folder.</para>
            </summary>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>The ImageList item name</returns>
            <example>
            KinectWindow.Show("Color")
            TextWindow.WriteLine("Press Enter to capture an image")
            TextWindow.Read()
            size = KinectWindow.SensorSize
            aspect = size["Width"] / size["Height"]
            width = 320
            height = width / aspect
            image = KinectWindow.CaptureImage(width, height)
            GraphicsWindow.DrawImage(image, 10, 10)
            TextWindow.Pause()        
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.CaptureCroppedImage(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Capture a cropped image and trigger the CroppedImageReady event when the image is ready
             </summary>
             <param name="left">the left pixel of the image</param>
             <param name="top">the top pixel of the image</param>
             <param name="width">the width of the image</param>
             <param name="height">the height of the image</param>
             <returns>the name of the image in the ImageList</returns>
             <example>
             <para>' Press the button to capture the bounds of the first tracked face</para>
             <code>
             Main()
             Sub Main
               KinectWindow.Show("Color")
               GraphicsWindow.Top = KinectWindow.Top
               GraphicsWindow.Left = KinectWindow.Left + KinectWindow.Width
               GraphicsWindow.Width = 200
               GraphicsWindow.Height = KinectWindow.Height
               captureFace = Controls.AddButton("Capture Face", 10, 10)
               Controls.ButtonClicked = OnButtonClicked
               KinectFaceList.StartTracking()
             EndSub
            
             Sub OnButtonClicked
               if Controls.LastClickedButton = captureFace Then
                 For i = 1 To 6
                   If KinectFaceList.IsTracked(i) Then
                     faceBox = KinectFaceList.GetBoundingBoxInColorSpace(i)
                     left = faceBox["Left"]
                     top = faceBox["Top"]
                     width = faceBox["Right"] - left
                     height = faceBox["Bottom"] - top
                     image = KinectWindow.CaptureCroppedImage(left, top, width, height)
                     GraphicsWindow.DrawImage(image, 10, 40)
                   EndIf
                 EndFor 
               EndIf
             EndSub
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.GetField``1(System.Type,System.String)">
            <summary>
            Gets a field
            </summary>
            <typeparam name="T">the field type</typeparam>
            <param name="t">the type that contains the field</param>
            <param name="name">the name of the field</param>
            <returns>the value of the field</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.Show(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Show the Kinect output window, displaying the output from one of the sensors.
            </summary>
            <param name="sensor">"Color", "Infrared", "Depth", "BodyIndex", or "Body"</param>
            <example>
            This will show the output from the infrared sensor.
            <code>
            KinectWindow.Show("Infrared")
            TextWindow.Pause()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.Hide">
            <summary>
            Hide the window
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.GetDispatcher">
            <summary>
            Gets the Small Basic Application dispatcher
            </summary>
            <returns>a dispatcher</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.ShowWindow(System.Object)">
            <summary>
            Show window thread function
            </summary>
            <param name="parameter">the name of the visual sensor</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.OnLocationChanged(System.Object,System.EventArgs)">
            <summary>
            window location changed
            </summary>
            <param name="sender">the window</param>
            <param name="e">the event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Window size changed
            </summary>
            <param name="sender">the Window</param>
            <param name="e">the size changed event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.OnClosed(System.Object,System.EventArgs)">
            <summary>
            Hide the window
            </summary>
            <param name="sender">the sender</param>
            <param name="e">the event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.GetDoubleValue(Microsoft.SmallBasic.Library.Primitive,System.Double)">
            <summary>
            Gets a double value from a Primitive
            </summary>
            <param name="primitive">the primitive</param>
            <param name="defaultValue">the default value</param>
            <returns>the double value</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.KinectWindow.GetBooleanValue(Microsoft.SmallBasic.Library.Primitive,System.Boolean)">
            <summary>
            Gets a boolean value from a Primitive
            </summary>
            <param name="primitive">a primitive</param>
            <param name="defaultValue">the default value</param>
            <returns>the boolean value</returns>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.Title">
            <summary>
            Gets or sets the title of the window
            </summary>
            <example>
            <code>
            KinectWindow.Title = "Hello World"
            KinectWindow.Show("Color")
            TextWindow.Pause()        
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.IsEndOnClose">
            <summary>
            Gets or sets a value indicating whether to end the program when the Kinect Window closes and it's the only Window open: "True" or "False"
            </summary>
            <remarks>Default Value: "True"</remarks>
            <example>
            <para>This program will close only when the text window is closed.</para>
            <code>
            KinectWindow.Show("Color")
            KinectWindow.IsEndOnClose = "False"
            TextWindow.Pause()</code>
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.SensorSize">
            <summary>
            Gets the size of the current sensor in pixels (Width and Height).  
            If the KinectWindows is not shown, the size of the color sensor 
            will be returned.
            </summary>
            <example>
            <code>
            size = KinectWindow.SensorSize
            TextWindow.WriteLine("Width=" + size["Width"])
            TextWindow.WriteLine("Height=" + size["Height"])
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.BackgroundImage">
            <summary>
            Gets or sets the background image as a URL or Filename
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.Left">
            <summary>
            Gets or sets the left of the window in pixels
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.Top">
            <summary>
            Gets or sets the left position in pixels of the window
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.Width">
            <summary>
            Gets or sets the width of the window in pixels
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.Height">
            <summary>
            Gets or sets the height of the window in pixels
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.IsBodySensor">
            <summary>
            Gets or sets a value indicating whether the body sensor is on and the body joints are being shown: "True" or "False"
            </summary>
            <remarks>Default Value: "False"</remarks>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.KinectWindow.IsBackgroundVisible">
            <summary>
            Gets or sets a value indicating whether the background is visible:
            "True" or "False"
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.KinectWindowControl">
            <summary>
            Interaction logic for KinectWindowControl
            </summary>
            <summary>
            KinectWindowControl
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isLoaded">
            <summary>
            Is the window loaded?
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.sensor">
            <summary>
            the kinect sensor
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.cameraVisualizer">
            <summary>
            the camera visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.depthVisualizer">
            <summary>
            the depth visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.infraredVisualizer">
            <summary>
            the infrared visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.bodyVisualizer">
            <summary>
            the body visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.bodyIndexVisualizer">
            <summary>
            the body index visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isInfrared">
            <summary>
            Is the infrared sensor on?
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isCamera">
            <summary>
            Is the camera sensor on?
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isDepth">
            <summary>
            Is the depth sensor on?
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isBody">
            <summary>
            Is the body sensor and visualizer on?
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.KinectWindowControl.isBodyIndex">
            <summary>
            Is the body index sensor on?
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.#ctor">
            <summary>
            Initializes a new instance of the KinectWindowControl class.
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.CaptureImage(System.String,System.Int32,System.Int32)">
            <summary>
            Capture an image and return the filename
            </summary>
            <param name="sensorName">the sensor to use</param>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename of the image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.CaptureImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture a cropped image
            </summary>
            <param name="sensorName">the sensor name</param>
            <param name="left">the left of the cropped rectangle</param>
            <param name="top">the top of the cropped rectangle</param>
            <param name="width">the width of the cropped rectangle</param>
            <param name="height">the height of the cropped rectangle</param>
            <returns>the filename of the cropped image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.Dispose">
            <summary>
            Dispose of the visualizers and close the sensor
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="managed">dispose of managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.OnIsAvailableChanged(System.Object,Microsoft.Kinect.IsAvailableChangedEventArgs)">
            <summary>
            Sensor.IsAvailable has changed
            </summary>
            <param name="sender">the Kinect Sensor</param>
            <param name="e">the Is Available Changed event arguments</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.InfraredWindowControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Initialize the visualizers that are on
            </summary>
            <param name="sender">the control</param>
            <param name="e">the routed event arguments</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.OnSensorIsAvailableChanged(System.Object,Microsoft.Kinect.IsAvailableChangedEventArgs)">
            <summary>
            Update the sensor warning visibility when the sensor availability changes
            </summary>
            <param name="sender">the Kinect Sensor</param>
            <param name="e">the is available changed event arguments</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.KinectWindowControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsBackgroundVisible">
            <summary>
            Gets or sets a value indicating whether the background is visible
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsCamera">
            <summary>
            Gets or sets a value indicating whether the camera sensor is on
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsDepth">
            <summary>
            Gets or sets a value indicating whether the depth sensor is on
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsInfrared">
            <summary>
            Gets or sets a value indicating whether the infrared sensor output is shown
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsBody">
            <summary>
            Gets or sets a value indicating whether the body tracker is shown
            </summary>
        </member>
        <member name="P:KinectForSmallBasicExtension.KinectWindowControl.IsBodyIndex">
            <summary>
            Gets or sets a value indicating whether the body index tracker is shown
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.Services.FacesChangedEventArgs">
            <summary>
            Faces changed event arguments
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FacesChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FacesChangedEventArgs class.
            </summary>
            <param name="index">the index of the changed face</param>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.FacesChangedEventArgs.Index">
            <summary>
            Gets the index of the changed face
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SmallBasic.Services.FaceTracker">
            <summary>
            Face Tracker
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.NuiDatabaseUrl">
            <summary>
            the URL of the NuiDatabase.zip file 
            </summary>
            <remarks>On the Microsoft Download center</remarks>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.extractDatabaseEvent">
            <summary>
            event triggered when database extraction is complete
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.kinectSensor">
            <summary>
            the kinect sensor
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.bodyCount">
            <summary>
            the number of bodies
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.displayHeight">
            <summary>
            the display height in pixels
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.displayWidth">
            <summary>
            the display width in pixels
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.faceFrameReaders">
            <summary>
            the face frame readers
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.faceFrameSources">
            <summary>
            the face frame sources
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.faceFrameResults">
            <summary>
            the face frame results
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.bodyFrameReader">
            <summary>
            the body frame reader
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SmallBasic.Services.FaceTracker.bodies">
            <summary>
            the bodies
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.#ctor">
            <summary>
            Initializes a new instance of the FaceTracker class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.StartTracking(Microsoft.Kinect.Face.FaceFrameFeatures)">
            <summary>
            Initialize the Face Tracker
            </summary>
            <param name="features">the features to track</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.Dispose">
            <summary>
            Dispose of the Face Tracker
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.ExtractNuiDatabase">
            <summary>
            Extract the NuiDatabase.zip to the application directory
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.ExtractNuiDatabaseThread(System.Object)">
            <summary>
            Thread to extract the NUI database
            </summary>
            <param name="parameter">The parameter is not used.</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.DownloadNuiDatabase(System.String)">
            <summary>
            Download the NUI Database
            </summary>
            <param name="filename">the filename of the NUI database in the Current User AppData\Roaming\Microsoft\Small Basic\NuiDatabase.zip</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.DownloadNuiDatabase(System.String,System.String)">
            <summary>
            Download the NUI Database
            </summary>
            <param name="filename">the destination filename on disk</param>
            <param name="nuiDatabase">the address of the NUI database on the internet</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.ExtractNuiDatabase(System.String)">
            <summary>
            Extract the NUI database to the directory of the assembly
            </summary>
            <param name="filename">the NUIDatabase.zip filename</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="cleanUpManaged">clean up the managed resources</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.OnBodyFrameArrived(System.Object,Microsoft.Kinect.BodyFrameArrivedEventArgs)">
            <summary>
            Get and refresh the bodies when a Body Frame arrives
            </summary>
            <param name="sender">the Body Frame Reader</param>
            <param name="e">the body frame arrived event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.ValidateFaceBoxAndPoints(Microsoft.Kinect.Face.FaceFrameResult)">
            <summary>
            Validates face bounding box and face points to be within screen space
            </summary>
            <param name="faceResult">the face frame result containing face box and points</param>
            <returns>success or failure</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.OnFrameArrived(System.Object,Microsoft.Kinect.Face.FaceFrameArrivedEventArgs)">
            <summary>
            Face Reader frame arrived event handler
            </summary>
            <param name="sender">a FaceFrameReader</param>
            <param name="e">the face frame arrived event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.GetFaceSourceIndex(Microsoft.Kinect.Face.FaceFrameSource)">
            <summary>
            Returns the index of the face frame source
            </summary>
            <param name="faceFrameSource">the face frame source</param>
            <returns>the index of the face source in the face source array</returns>
        </member>
        <member name="M:Microsoft.Kinect.SmallBasic.Services.FaceTracker.OnIsAvailableChanged(System.Object,Microsoft.Kinect.IsAvailableChangedEventArgs)">
            <summary>
            Kinect sensor availability change event handler
            </summary>
            <param name="sender">the Kinect Sensor</param>
            <param name="e">the is available changed event arguments</param>
        </member>
        <member name="E:Microsoft.Kinect.SmallBasic.Services.FaceTracker.FacesChanged">
            <summary>
            Faces changed event handler
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.FaceTracker.ErrorMessage">
            <summary>
            Gets or sets the NUI Database download error message
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.FaceTracker.Faces">
            <summary>
            Gets the faces
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.FaceTracker.FaceCount">
            <summary>
            Gets the number of faces that can be tracked
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SmallBasic.Services.FaceTracker.IsSensorAvailable">
            <summary>
            Gets a value indicating whether the Kinect Sensor is available.
            </summary>
        </member>
        <member name="T:KinectForSmallBasicExtension.Services.ImageSaver">
            <summary>
            Image Saver
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.ImageSaver.GetField``1(System.Type,System.String)">
            <summary>
            Gets a field value from a type
            </summary>
            <typeparam name="T">the field value type</typeparam>
            <param name="t">the containing type</param>
            <param name="name">the name of the field</param>
            <returns>the value</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.ImageSaver.CaptureImage(System.Windows.Media.Imaging.WriteableBitmap,System.String,System.Int32,System.Int32)">
            <summary>
            Capture an image and save it to the file system
            </summary>
            <param name="bitmap">the writable bitmap</param>
            <param name="imageName">the image name</param>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename</returns>
            <exception cref="T:System.ArgumentNullException">if bitmap is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if width is less than 1</exception>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.ImageSaver.CaptureCroppedImage(System.Windows.Media.Imaging.WriteableBitmap,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture an image and save it to the file system
            </summary>
            <param name="bitmap">the writable bitmap</param>
            <param name="imageName">the image name</param>
            <param name="left">the left pixel</param>
            <param name="top">the top pixel</param>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.ImageSaver.GetDispatcher">
            <summary>
            Gets the Small Basic Application dispatcher
            </summary>
            <returns>the application dispatcher</returns>
        </member>
        <member name="T:KinectForSmallBasicExtension.Services.InfraredVisualizer">
            <summary>
            Infrared visualizer
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.InfraredVisualizer.bytePerPixel">
            <summary>
            Size for the RGB pixel in bitmap
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.InfraredVisualizer.infraredFrameReader">
            <summary>
            the reader
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.InfraredVisualizer.infraredData">
            <summary>
            the raw data
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.InfraredVisualizer.infraredPixels">
            <summary>
            the pixels
            </summary>
        </member>
        <member name="F:KinectForSmallBasicExtension.Services.InfraredVisualizer.infraredBitmap">
            <summary>
            the writeable bitmap
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.#ctor(Microsoft.Kinect.KinectSensor,System.Windows.Controls.Image)">
            <summary>
            Initializes a new instance of the InfraredVisualizer class.
            </summary>
            <param name="sensor">the Kinect sensor</param>
            <param name="image">the image</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.Dispose">
            <summary>
            Dispose of the infrared reader
            </summary>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.CaptureImage(System.Int32,System.Int32)">
            <summary>
            Capture the current image
            </summary>
            <param name="width">the width of the captured image in pixels</param>
            <param name="height">the height of the captured image in pixels</param>
            <returns>the filename</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.CaptureImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Capture a cropped image
            </summary>
            <param name="left">the left pixel</param>
            <param name="top">the top pixel</param>
            <param name="width">the width in pixels</param>
            <param name="height">the height in pixels</param>
            <returns>the filename of the cropped image</returns>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.Dispose(System.Boolean)">
            <summary>
            Dispose of the resources
            </summary>
            <param name="managed">dispose of managed resources</param>
        </member>
        <member name="M:KinectForSmallBasicExtension.Services.InfraredVisualizer.OnFrameArrived(System.Object,Microsoft.Kinect.InfraredFrameArrivedEventArgs)">
            <summary>
            Frame Arrived
            </summary>
            <param name="sender">the infrared frame reader</param>
            <param name="e">the infrared frame arrived event arguments</param>
        </member>
    </members>
</doc>
